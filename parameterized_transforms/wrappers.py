"""
Copyright 2025 Apple Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import typing as t

import torch

import parameterized_transforms.core as ptc
import parameterized_transforms.utils as ptu


class ExtractDefaultParams(ptc.ComposingTransform):
    """A transform that keeps the input image unchanged but exposes the
    default parameters of the underlying transform.
    """

    def __init__(
        self,
        transform: t.Callable,
        tx_mode: ptc.TRANSFORM_MODE_TYPE = ptc.TransformMode.CASCADE,
    ) -> None:
        """
        :param transform: The transform to be wrapped.
        :param tx_mode: The mode of the transform.
            DEFAULT: `ptc.TransformMode.CASCADE`.
        """

        super(ExtractDefaultParams, self).__init__(tx_mode=tx_mode)

        self.transform = transform
        self.param_count = self.set_param_count()

    def set_param_count(self) -> int:
        """Returns the total number of processed parameters generated by the
        composing transform under consideration.

        :return: The number of parameters for this transform.
        """

        return self.transform.param_count

    def get_raw_params(self, img: ptc.IMAGE_TYPE) -> ptc.PARAM_TYPE:
        """Generates the raw parameters used to augment current data point.

        :param img: The data point to be augmented.

        :return: Current raw parameters to augment the data point.
        """

        return ()

    def apply_cascade_transform(
        self, img: ptc.IMAGE_TYPE, params: ptc.PARAM_TYPE, **kwargs
    ) -> ptc.TRANSFORM_RETURN_TYPE:
        """Augments given data point using given parameters.

        :param img: The data point to be augmented.
        :param params: The parameters to be used for augmentation.

        :return: The augmented image.
        """

        id_params = self.transform.get_default_params(img=img, processed=True)

        return img, id_params

    def post_process_params(
        self,
        img: ptc.IMAGE_TYPE,
        params: ptc.PARAM_TYPE,
        aug_params: ptc.PARAM_TYPE,
    ) -> t.Tuple[ptc.PARAM_TYPE, ptc.PARAM_TYPE]:
        """Post-processes the parameters of augmentations before outputting.

        :param img: The data point to be augmented.
        :param params: The raw local parameters to be post-processed.
        :param aug_params: The processed params from the composition of parameterized transforms.

        :return: The post-processed parameters.
        """

        return params, aug_params

    def extract_params(
        self, params: ptc.PARAM_TYPE
    ) -> t.Tuple[ptc.PARAM_TYPE, ptc.PARAM_TYPE]:
        """Chunks the input parameters into two sets; the first required for
        the augmentation of the current data and the second to pass on to the
        next augmentations.

        :param params: The parameters remaining from the augmentations so far.

        :return: The tuple of the local and subsequent parameters.
        """

        return params[: self.param_count], params[self.param_count :]

    def pre_process_params(
        self, img: ptc.IMAGE_TYPE, params: ptc.PARAM_TYPE
    ) -> t.Tuple[ptc.PARAM_TYPE, ptc.PARAM_TYPE]:
        """Pre-processes the parameters of augmentations after inputting.

        :param img: The data point to be augmented.
        :param params: The parameters from which to extract local parameters.

        :return: The pre-processed parameters ready for their usage.
        """

        return (), params

    def apply_consume_transform(
        self,
        img: ptc.IMAGE_TYPE,
        params: ptc.PARAM_TYPE,
        aug_params: ptc.PARAM_TYPE,
    ) -> ptc.TRANSFORM_RETURN_TYPE:
        """Applies the transform with given parameters by consuming them.

        :param img: The data point to be augmented.
        :param params: The parameters remaining from the augmentations so far.
        :param aug_params: The parameters from composition of parameterized transforms.

        :return: The augmented image with the remaining parameters.
        """

        return img, ()

    def get_default_params(
        self, img: ptc.IMAGE_TYPE, processed: bool = True
    ) -> ptc.PARAM_TYPE:
        """Returns the parameters for preserving the input data information.

        :param img: The data point to be augmented.
        :param processed: Whether we want the processed default parameters.

        :return: The no-augmentation params for the class.
        """

        return self.transform.get_default_params(img=img, processed=processed)

    def __str__(self) -> str:
        """Defines the string representation of the transform.

        :return: The string representation of the transform.
        """

        start_string = f"{self.__class__.__name__}("

        core_transform_string = ptu.indent(
            data=str(self.transform), indentor="  ", connector="\n"
        )

        end_string = f")"

        return "\n".join([start_string, core_transform_string, end_string])


class ApplyDefaultParams(ptc.ComposingTransform):
    """Defines a function that gets the default parameters of its transform
    and applies it to the image.
    """

    def __init__(
        self,
        transform: t.Callable,
        tx_mode: ptc.TRANSFORM_MODE_TYPE = ptc.TransformMode.CASCADE,
    ) -> None:
        """
        :param transform: The transform to be wrapped.
        :param tx_mode: The mode of the transform.
            DEFAULT: `ptc.TransformMode.CASCADE`.
        """

        super(ApplyDefaultParams, self).__init__(tx_mode=tx_mode)

        self.transform = transform
        self.param_count = self.set_param_count()

    def set_param_count(self) -> int:
        """Returns the total number of processed parameters generated by the
        composing transform under consideration.

        :return: The number of parameters for this transform.
        """

        return self.transform.param_count

    def get_raw_params(self, img: ptc.IMAGE_TYPE) -> ptc.PARAM_TYPE:
        """Generates the raw parameters used to augment current data point.

        :param img: The data point to be augmented.

        :return: Current raw parameters to augment the data point.
        """

        return ()

    def apply_cascade_transform(
        self, img: ptc.IMAGE_TYPE, params: ptc.PARAM_TYPE, **kwargs
    ) -> ptc.TRANSFORM_RETURN_TYPE:
        """Augments given data point using given parameters.

        :param img: The data point to be augmented.
        :param params: The parameters to be used for augmentation.

        :return: The augmented image.
        """

        id_params = self.transform.get_default_params(img=img, processed=True)

        aug_img, rem_params = self.transform.consume_transform(
            img=img, params=id_params
        )
        assert rem_params == ()

        return aug_img, id_params

    def post_process_params(
        self,
        img: ptc.IMAGE_TYPE,
        params: ptc.PARAM_TYPE,
        aug_params: ptc.PARAM_TYPE,
    ) -> t.Tuple[ptc.PARAM_TYPE, ptc.PARAM_TYPE]:
        """Post-processes the parameters of augmentations before outputting.

        :param img: The data point to be augmented.
        :param params: The raw local parameters to be post-processed.
        :param aug_params: The processed params from the composition of parameterized transforms.

        :return: The post-processed parameters.
        """

        return params, aug_params

    def extract_params(
        self, params: ptc.PARAM_TYPE
    ) -> t.Tuple[ptc.PARAM_TYPE, ptc.PARAM_TYPE]:
        """Chunks the input parameters into two sets; the first required for
        the augmentation of the current data and the second to pass on to the
        next augmentations.

        :param params: The parameters remaining from the augmentations so far.

        :return: The tuple of the local and subsequent parameters.
        """

        return params[: self.param_count], params[self.param_count :]

    def pre_process_params(
        self, img: ptc.IMAGE_TYPE, params: ptc.PARAM_TYPE
    ) -> t.Tuple[ptc.PARAM_TYPE, ptc.PARAM_TYPE]:
        """Pre-processes the parameters of augmentations after inputting.

        :param img: The data point to be augmented.
        :param params: The parameters from which to extract local parameters.

        :return: The pre-processed parameters ready for their usage.
        """

        return (), params

    def apply_consume_transform(
        self,
        img: ptc.IMAGE_TYPE,
        params: ptc.PARAM_TYPE,
        aug_params: ptc.PARAM_TYPE,
    ) -> ptc.TRANSFORM_RETURN_TYPE:
        """Applies the transform with given parameters by consuming them.

        :param img: The data point to be augmented.
        :param params: The parameters remaining from the augmentations so far.
        :param aug_params: The parameters from composition of parameterized transforms.

        :return: The augmented image with the remaining parameters.
        """

        id_params = self.transform.get_default_params(img=img, processed=True)

        aug_img, rem_aug_params = self.transform.consume_transform(
            img=img, params=id_params
        )

        assert rem_aug_params == ()

        return aug_img, ()

    def get_default_params(
        self, img: ptc.IMAGE_TYPE, processed: bool = True
    ) -> ptc.PARAM_TYPE:
        """Returns the parameters for preserving the input data information.

        :param img: The data point to be augmented.
        :param processed: Whether we want the processed default parameters.

        :return: The no-augmentation params for the class.
        """

        return self.transform.get_default_params(img=img, processed=processed)

    def __str__(self) -> str:
        """Defines the string representation of the transform.

        :return: The string representation of the transform.
        """

        start_string = f"{self.__class__.__name__}("

        core_transform_string = ptu.indent(
            data=str(self.transform), indentor="  ", connector="\n"
        )

        end_string = f")"

        return "\n".join([start_string, core_transform_string, end_string])


class CastParamsToTensor(ptc.Transform):
    """Implements a wrappers to cast final parameters as `torch.Tensor`."""

    def __init__(
        self,
        transform: t.Callable,
        tx_mode: ptc.TRANSFORM_MODE_TYPE = ptc.TransformMode.CASCADE,
    ) -> None:
        """
        :param transform: The transform to be wrapped.
        :param tx_mode: The mode of the transform.
        """

        super(CastParamsToTensor, self).__init__(tx_mode=tx_mode)

        self.transform = transform
        self.param_count = self.set_param_count()

    def set_param_count(self) -> int:
        """Returns the total number of processed parameters generated by the
        composing transform under consideration.

        :return: The number of parameters for this transform.
        """

        return self.transform.param_count

    def cascade_transform(
        self, img: ptc.IMAGE_TYPE, params: ptc.PARAM_TYPE
    ) -> ptc.TRANSFORM_RETURN_TYPE:
        """Input the data point and previous parameters, generate the parameters
        for the current transform, augment previous parameters with current
        parameters, and return the augmented parameters.

        :param img: The data which needs to be augmented.
        :param params: The parameters for the augmentations so far.

        :return: The tuple of augmented data point and the params.
        """

        aug_img, aug_params = self.transform.cascade_transform(img=img, params=params)

        aug_params_tensor = CastParamsToTensor._to_tensor(
            data=aug_params, dtype=torch.float32
        )
        return aug_img, aug_params_tensor

    @staticmethod
    def _to_tensor(data: t.Any, dtype: torch.dtype = torch.float32) -> torch.Tensor:
        """Converts the given data to a FLAT `torch.Tensor` instance.

        :param data: The data to be converted to a flat `torch.Tensor`.
        :param dtype: The data type of the tensor.
            DEFAULT: `torch.float32`.

        :return: The flat `torch.Tensor` generated from the given data.
        """

        if isinstance(data, torch.Tensor):
            return data.to(dtype=dtype)

        data_torch = torch.tensor(data=data, dtype=dtype).view(-1)
        return data_torch

    def consume_transform(
        self, img: ptc.IMAGE_TYPE, params: ptc.PARAM_TYPE
    ) -> ptc.TRANSFORM_RETURN_TYPE:
        """Input the data point and parameters, extract the required number of
        parameters, performs the required transforms, and returns the
        augmented data point along with remaining parameters.

        :param img: The data point to be augmented.
        :param params: The parameters remaining from the augmentations so far.

        :return: The tuple of augmented data point and remaining parameters.
        """

        raise NotImplementedError(
            f"ERROR | the one-way wrapper class: {self.name} "
            f"is NOT supposed to operate in `CONSUME` mode."
        )

    def get_default_params(
        self, img: ptc.IMAGE_TYPE, processed: bool = True
    ) -> ptc.PARAM_TYPE:
        """Returns the parameters for preserving the input data information.

        :param img: The data point to be augmented.
        :param processed: Whether we want the processed default parameters.

        :return: The no-augmentation params for the class.
        """

        core_default_params = self.transform.get_default_params(
            img=img, processed=processed
        )

        core_default_params_torch = CastParamsToTensor._to_tensor(
            data=core_default_params, dtype=torch.float32
        )

        return core_default_params_torch

    def __str__(self) -> str:
        """Defines the string representation of the transform.

        :return: The string representation of the transform.
        """

        start_string = f"{self.__class__.__name__}("

        core_transform_string = ptu.indent(
            data=str(self.transform), indentor="  ", connector="\n"
        )

        end_string = f")"

        return "\n".join([start_string, core_transform_string, end_string])


class DropParams(ptc.Transform):
    """Implements a wrappers to drop params and only output the augmented
    image of the underlying transform.
    """

    def __init__(
        self,
        transform: t.Callable,
        tx_mode: ptc.TRANSFORM_MODE_TYPE = ptc.TransformMode.CASCADE,
    ) -> None:
        """
        :param transform: The transform to be wrapped.
        :param tx_mode: The mode of the transform.
        """

        super(DropParams, self).__init__(tx_mode=tx_mode)

        self.transform = transform
        self.param_count = self.set_param_count()

    def set_param_count(self) -> int:
        """Returns the total number of processed parameters generated by the
        composing transform under consideration.

        :return: The number of parameters for this transform.
        """

        return 0

    def cascade_transform(
        self, img: ptc.IMAGE_TYPE, params: ptc.PARAM_TYPE
    ) -> ptc.IMAGE_TYPE:
        """Input the data point and previous parameters, generate the parameters
        for the current transform, augment previous parameters with current
        parameters, and return the augmented parameters.

        :param img: The data which needs to be augmented.
        :param params: The parameters for the augmentations so far.

        :return: The tuple of augmented data point and the params.
        """

        aug_img, aug_params = self.transform.cascade_transform(img=img, params=params)

        return aug_img

    def consume_transform(
        self, img: ptc.IMAGE_TYPE, params: ptc.PARAM_TYPE
    ) -> ptc.TRANSFORM_RETURN_TYPE:
        """Input the data point and parameters, extract the required number of
        parameters, performs the required transforms, and returns the
        augmented data point along with remaining parameters.

        :param img: The data point to be augmented.
        :param params: The parameters remaining from the augmentations so far.

        :return: The tuple of augmented data point and remaining parameters.
        """

        raise NotImplementedError(
            f"ERROR | the one-way wrapper class: {self.name} "
            f"is NOT supposed to operate in `CONSUME` mode "
            f"and thus, the method `consume_transform` is unimplemented."
        )

    def get_default_params(
        self, img: ptc.IMAGE_TYPE, processed: bool = True
    ) -> ptc.PARAM_TYPE:
        """Returns the parameters for preserving the input data information.

        :param img: The data point to be augmented.
        :param processed: Whether we want the processed default parameters.

        :return: The no-augmentation params for the class.
        """

        raise NotImplementedError(
            f"ERROR | the one-way wrapper class: {self.name} "
            f"drops parameters and thus, "
            f"the method `get_default_params` is unimplemented."
        )

    def __str__(self) -> str:
        """Defines the string representation of the transform.

        :return: The string representation of the transform.
        """

        start_string = f"{self.__class__.__name__}("

        core_transform_string = ptu.indent(
            data=str(self.transform), indentor="  ", connector="\n"
        )

        end_string = f")"

        return "\n".join([start_string, core_transform_string, end_string])
